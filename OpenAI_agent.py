import os
import time
from openai import OpenAI
from typing import Optional

API_KEY = os.getenv("OPENAI_API_KEY")
if not API_KEY:
    raise SystemExit("OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")

client = OpenAI(api_key=API_KEY)

MODEL = "gpt-5-mini"
MAX_RETRIES = 3
RETRY_BACKOFF = 1.5  # –º–Ω–æ–∂–Ω–∏–∫ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
DEFAULT_TIMEOUT = 30

def _call_openai(prompt: str, timeout: int = DEFAULT_TIMEOUT, temperature: float = 0.7, top_p: float = 0.9, max_output_tokens: int = 300) -> str:
    delay = 1.0
    for attempt in range(1, MAX_RETRIES + 1):
        try:
            resp = client.responses.create(
                model=MODEL,
                input=prompt,
                temperature=temperature,
                top_p=top_p,
                max_output_tokens=max_output_tokens,
                timeout=timeout
            )
            if hasattr(resp, "output_text") and resp.output_text:
                return resp.output_text.strip()
            out = ""
            for item in getattr(resp, "output", []) or []:
                for c in getattr(item, "content", []) or []:
                    if isinstance(c, dict) and c.get("type") == "output_text":
                        out += c.get("text", "")
                    elif isinstance(c, str):
                        out += c
            return out.strip()
        except Exception as exc:
            if attempt == MAX_RETRIES:
                raise
            time.sleep(delay)
            delay *= RETRY_BACKOFF

def summarize_description(text: str) -> str:
    if not text:
        return ""
    prompt = f"""
–°—Ç–∏—Å–Ω–∏ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –¥–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram-–∫–∞–Ω–∞–ª—É.
–§–æ—Ä–º–∞—Ç:
‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –≤—Å—Ç—É–ø –∑ –Ω–∞–∑–≤–æ—é –ø–æ—Å–∞–¥–∏;
‚Äî –∫–ª—é—á–æ–≤—ñ –≤–∏–º–æ–≥–∏;
‚Äî —â–æ –ø—Ä–æ–ø–æ–Ω—É—é—Ç—å;
‚Äî –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –Ω–µ –≤–∫–∞–∑—É–π, –±–æ –≤–æ–Ω–∞ –≤–∂–µ —î –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É –≤–∞–∫–∞–Ω—Å—ñ—ó.
‚Äî –±–∞–∂–∞–Ω–æ –Ω–µ –±—ñ–ª—å—à–µ ~1000 —Å–∏–º–≤–æ–ª—ñ–≤, –∞–ª–µ –Ω–µ –æ–±—Ä—ñ–∑–∞–π —Å–ª–æ–≤–æ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω—ñ.

–í–ê–ñ–õ–ò–í–û: –∑–∞–≤–µ—Ä—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–Ω–∏–º —Ä–µ—á–µ–Ω–Ω—è–º.
–¢–µ–∫—Å—Ç –æ–ø–∏—Å—É:
{text}
"""
    return _call_openai(prompt, timeout=DEFAULT_TIMEOUT)

def create_useful_tips(num_tips: int = 3, locale: str = "uk") -> str:
    """
    –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –∫–æ—Ä–æ—Ç–∫—ñ –∫–æ—Ä–∏—Å–Ω—ñ tips –¥–ª—è junior.
    –Ü–Ω—Å—Ç—Ä—É–∫—Ü—ñ—ó: –∫–æ–∂–Ω–∞ –ø–æ—Ä–∞–¥–∞ –º–∞—î –±—É—Ç–∏ —É–Ω—ñ–∫–∞–ª—å–Ω–æ—é, –æ—Ö–æ–ø–ª—é–≤–∞—Ç–∏ —Ä—ñ–∑–Ω—É —Ç–µ–º—É
    (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥: —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏, soft-skill, —ñ–Ω—Ç–µ—Ä–≤'—é, –Ω–∞–≤—á–∞–ª—å–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏, –ø—Ä–∞–∫—Ç–∏–∫–∞).
    –ù–µ –ø–æ–≤—Ç–æ—Ä—é–≤–∞—Ç–∏ –æ–¥–Ω–∞–∫–æ–≤—ñ —Ñ—Ä–∞–∑–∏/—Å–ª–æ–≤–æ—Å–ø–æ–ª—É—á–µ–Ω–Ω—è. –ü–æ–≤–µ—Ä–Ω—É—Ç–∏ –º–∞—Ä–∫–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫.
    """
    lang_note = "—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é" if locale.startswith("uk") else "–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é"
    prompt = f"""
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –∑–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ {num_tips} –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–æ—Ä–∏—Å–Ω–∏—Ö –ø–æ—Ä–∞–¥ –¥–ª—è junior —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤.
–£–ú–û–í–ò:
- –ú–æ–≤–∞: {lang_note}.
- –ö–æ–∂–Ω–∞ –ø–æ—Ä–∞–¥–∞ ‚Äî 1‚Äì2 –∫–æ—Ä–æ—Ç–∫—ñ —Ä–µ—á–µ–Ω–Ω—è (–º–∞–∫—Å. 140 —Å–∏–º–≤–æ–ª—ñ–≤).
- –ö–æ–∂–Ω–∞ –ø–æ—Ä–∞–¥–∞ –º–∞—î —Ç–æ—Ä–∫–∞—Ç–∏—Å—è –û–ö–†–ï–ú–û–á —Ç–µ–º–∏: (1) —ñ–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç–∏/workflow, (2) –Ω–∞–≤—á–∞–ª—å–Ω—ñ —Ä–µ—Å—É—Ä—Å–∏/–ø—Ä–∞–∫—Ç–∏–∫–∞, (3) soft skills/—Å–ø—ñ–≤–ø—Ä–∞—Ü—è, (4) –ø—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–æ —ñ–Ω—Ç–µ—Ä–≤'—é, (5) –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω—ñ—Å—Ç—å/–∑–≤–∏—á–∫–∏ ‚Äî –ø—ñ–¥–±–∏—Ä–∞–π –ø–æ —Ç–µ–º–∞—Ö –∑–∞–ª–µ–∂–Ω–æ –≤—ñ–¥ –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –ø–æ—Ä–∞–¥.
- –£–Ω–∏–∫–∞–π –ø–æ–≤—Ç–æ—Ä—ñ–≤: –Ω–µ –≤–∂–∏–≤–∞–π –æ–¥–Ω–∞–∫–æ–≤—ñ —Å–ª–æ–≤–∞/—Ñ—Ä–∞–∑–∏ –Ω–∞ –ø–æ—á–∞—Ç–∫—É –∫–æ–∂–Ω–æ—ó –ø–æ—Ä–∞–¥–∏.
- –ü–æ—Ç—Ä—ñ–±–µ–Ω –º–∞—Ä–∫–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ (‚Äî –∞–±–æ ‚Ä¢), –±–µ–∑ –∑–∞–π–≤–∏—Ö –∑–∞–≥–æ–ª–æ–≤–∫—ñ–≤ –∞–±–æ –ø–æ—è—Å–Ω–µ–Ω—å.
–ü–æ—á–Ω–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ª–∏—à–µ –∑—ñ —Å–ø–∏—Å–∫—É –ø–æ—Ä–∞–¥ (–±–µ–∑ –≤—Å—Ç—É–ø–Ω–∏—Ö —Ñ—Ä–∞–∑).
–ü—Ä–∏–∫–ª–∞–¥ —Ñ–æ—Ä–º–∞—Ç—É:
‚Äî ...
‚Äî ...
"""
    # —Ç—Ä–æ—Ö–∏ –≤–∏—â–∞ temperature + —à–∏—Ä–æ–∫–∏–π top_p –¥–ª—è –±—ñ–ª—å—à–æ—ó –≤–∞—Ä—ñ–∞—Ç–∏–≤–Ω–æ—Å—Ç—ñ
    raw = _call_openai(prompt, timeout=DEFAULT_TIMEOUT, temperature=0.85, top_p=0.95, max_output_tokens=256)

    # –ø—Ä–æ—Å—Ç–µ –ø–æ—Å—Ç–æ–±—Ä–æ–±–ª–µ–Ω–Ω—è: –≤–∏–¥–∞–ª–∏—Ç–∏ –Ω–∞–¥–ª–∏—à–∫–æ–≤—ñ –ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏, –≥–∞—Ä–∞–Ω—Ç—É–≤–∞—Ç–∏ –ø–æ—Ç—Ä—ñ–±–Ω—É –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤
    lines = [l.strip() for l in raw.splitlines() if l.strip()]
    # –∑–±–µ—Ä—ñ–≥–∞—î–º–æ —Ç—ñ–ª—å–∫–∏ –º–∞—Ä–∫–æ–≤–∞–Ω—ñ —Ä—è–¥–∫–∏ –∞–±–æ –ø–µ—Ä—à—ñ num_tips —Ä—è–¥–∫—ñ–≤ —è–∫ fallback
    tips = [l for l in lines if l.startswith(("‚Äî", "-", "‚Ä¢"))]
    if len(tips) < num_tips:
        # fallback: –≤–∑—è—Ç–∏ –ø–µ—Ä—à—ñ –Ω–µ–ø–æ—Ä–æ–∂–Ω—ñ —Ä—è–¥–∫–∏ —ñ –º–∞—Ä–∫—É–≤–∞—Ç–∏ —ó—Ö
        nonblank = [l for l in lines if not l.startswith("–ü–æ—á–Ω–∏")][:num_tips]
        tips = [f"‚Äî {l.lstrip('‚Äî-‚Ä¢ ')}" for l in nonblank][:num_tips]
    # —è–∫—â–æ –º–æ–¥–µ–ª—å –≤—Å–µ —â–µ –ø–æ–≤—Ç–æ—Ä—é—î ‚Äî —Å–ø—Ä–æ–±–∞ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó —â–µ —Ä–∞–∑ –∑ —ñ–Ω—à–æ—é temperature (–ø—Ä–æ—Å—Ç–∏–π retry)
    if len(set(tips)) < len(tips):
        alt = _call_openai(prompt, timeout=DEFAULT_TIMEOUT, temperature=0.95, top_p=1.0, max_output_tokens=256)
        alt_lines = [l.strip() for l in alt.splitlines() if l.strip()]
        alt_tips = [l for l in alt_lines if l.startswith(("‚Äî", "-", "‚Ä¢"))]
        for t in alt_tips:
            if t not in tips and len(tips) < num_tips:
                tips.append(t)
    # trim to requested count
    tips = tips[:num_tips]
    return "\n".join(tips)

def format_for_telegram(title: str, company: str = "", salary: str = "", url: str = "", summary: str = "") -> str:
    comp_line = f"üè¢ {company}\n" if company else ""
    salary_line = f"üí∞ {salary}\n\n" if salary else "üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞\n\n"
    message = (
        f"üßë‚Äçüíª <b>{title}</b>\n"
        f"{comp_line}"
        f"{salary_line}"
        f"{summary}\n\n"
        f"üîó <a href='{url}'>–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</a>"
    )
    return message

def create_vacancy_summary(title: str, company: str = "", salary: str = "", url: str = "") -> str:
    """
    –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ—ó. –Ø–∫—â–æ –≤–¥–∞—Å—Ç—å—Å—è ‚Äî –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –ø–æ–≤–Ω–∏–π –æ–ø–∏—Å –∑ url —á–µ—Ä–µ–∑ desc_parser,
    —ñ–Ω–∞–∫—à–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º/–ø–æ–ª—è–º–∏.
    """
    try:
        from desc_parser import get_vacancy_description
    except Exception:
        get_vacancy_description = None

    text = ""
    if get_vacancy_description and url:
        try:
            text = get_vacancy_description(url) or ""
        except Exception:
            text = ""

    if text:
        try:
            summary = summarize_description(text)
        except Exception:
            summary = "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É —Å–µ—Ä–≤—ñ—Å—É."
    else:
        # fallback ‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –∑ –ø–æ–ª—ñ–≤
        parts = [title]
        if company:
            parts.append(f"–ö–æ–º–ø–∞–Ω—ñ—è: {company}")
        if salary:
            parts.append(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}")
        summary = " ¬∑ ".join(parts)

    return format_for_telegram(title, company, salary, url, summary)
