import os
import time
from openai import OpenAI
from typing import Optional

API_KEY = os.getenv("OPENAI_API_KEY")
if not API_KEY:
    raise SystemExit("OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")

client = OpenAI(api_key=API_KEY)

MODEL = "gpt-5-mini"
MAX_RETRIES = 3
RETRY_BACKOFF = 1.5  # –º–Ω–æ–∂–Ω–∏–∫ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏
DEFAULT_TIMEOUT = 30

def _call_openai(prompt: str, timeout: int = DEFAULT_TIMEOUT) -> str:
    delay = 1.0
    for attempt in range(1, MAX_RETRIES + 1):
        try:
            resp = client.responses.create(
                model=MODEL,
                input=prompt,
                timeout=timeout
            )
            if hasattr(resp, "output_text") and resp.output_text:
                return resp.output_text.strip()
            out = ""
            for item in getattr(resp, "output", []) or []:
                for c in getattr(item, "content", []) or []:
                    if isinstance(c, dict) and c.get("type") == "output_text":
                        out += c.get("text", "")
                    elif isinstance(c, str):
                        out += c
            return out.strip()
        except Exception as exc:
            if attempt == MAX_RETRIES:
                raise
            time.sleep(delay)
            delay *= RETRY_BACKOFF

def summarize_description(text: str) -> str:
    if not text:
        return ""
    prompt = f"""
–°—Ç–∏—Å–Ω–∏ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –¥–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram-–∫–∞–Ω–∞–ª—É.
–§–æ—Ä–º–∞—Ç:
‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –≤—Å—Ç—É–ø –∑ –Ω–∞–∑–≤–æ—é –ø–æ—Å–∞–¥–∏;
‚Äî –∫–ª—é—á–æ–≤—ñ –≤–∏–º–æ–≥–∏;
‚Äî —â–æ –ø—Ä–æ–ø–æ–Ω—É—é—Ç—å;
‚Äî –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—ñ –Ω–µ –≤–∫–∞–∑—É–π, –±–æ –≤–æ–Ω–∞ –≤–∂–µ —î –≤ –∑–∞–≥–æ–ª–æ–≤–∫—É –≤–∞–∫–∞–Ω—Å—ñ—ó.
‚Äî –±–∞–∂–∞–Ω–æ –Ω–µ –±—ñ–ª—å—à–µ ~1000 —Å–∏–º–≤–æ–ª—ñ–≤, –∞–ª–µ –Ω–µ –æ–±—Ä—ñ–∑–∞–π —Å–ª–æ–≤–æ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω—ñ.

–í–ê–ñ–õ–ò–í–û: –∑–∞–≤–µ—Ä—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–Ω–∏–º —Ä–µ—á–µ–Ω–Ω—è–º.
–¢–µ–∫—Å—Ç –æ–ø–∏—Å—É:
{text}
"""
    return _call_openai(prompt, timeout=DEFAULT_TIMEOUT)

def create_useful_tips(num_tips: int = 3, locale: str = "uk") -> str:
    lang_note = "—É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é" if locale.startswith("uk") else "–∞–Ω–≥–ª—ñ–π—Å—å–∫–æ—é"
    prompt = f"""
–ó–≥–µ–Ω–µ—Ä—É–π {num_tips} –∫–æ—Ä–æ—Ç–∫–∏—Ö –∫–æ—Ä–∏—Å–Ω–∏—Ö –ø–æ—Ä–∞–¥ (Useful tips) –¥–ª—è junior —Ä–æ–∑—Ä–æ–±–Ω–∏–∫—ñ–≤.
–ö–æ–∂–Ω–∞ –ø–æ—Ä–∞–¥–∞ ‚Äî 1-2 –∫–æ—Ä–æ—Ç–∫—ñ —Ä–µ—á–µ–Ω–Ω—è. –í–∏–∫–æ—Ä–∏—Å—Ç–∞–π –º–∞—Ä–∫–æ–≤–∞–Ω–∏–π —Å–ø–∏—Å–æ–∫ (‚Äî –∞–±–æ ‚Ä¢).
–ú–æ–≤–∞: {lang_note}. –ü–æ–≤–µ—Ä–Ω–∏ –ª–∏—à–µ —Å–ø–∏—Å–æ–∫ –ø–æ—Ä–∞–¥, –±–µ–∑ –≤—Å—Ç—É–ø—É.
"""
    return _call_openai(prompt, timeout=DEFAULT_TIMEOUT)

def format_for_telegram(title: str, company: str = "", salary: str = "", url: str = "", summary: str = "") -> str:
    comp_line = f"üè¢ {company}\n" if company else ""
    salary_line = f"üí∞ {salary}\n\n" if salary else "üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞\n\n"
    message = (
        f"üßë‚Äçüíª <b>{title}</b>\n"
        f"{comp_line}"
        f"{salary_line}"
        f"{summary}\n\n"
        f"üîó <a href='{url}'>–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</a>"
    )
    return message

def create_vacancy_summary(title: str, company: str = "", salary: str = "", url: str = "") -> str:
    """
    –ó–≥–µ–Ω–µ—Ä—É–≤–∞—Ç–∏ –ø—ñ–¥—Å—É–º–æ–∫ –≤–∞–∫–∞–Ω—Å—ñ—ó. –Ø–∫—â–æ –≤–¥–∞—Å—Ç—å—Å—è ‚Äî –≤–∏—Ç—è–≥–Ω—É—Ç–∏ –ø–æ–≤–Ω–∏–π –æ–ø–∏—Å –∑ url —á–µ—Ä–µ–∑ desc_parser,
    —ñ–Ω–∞–∫—à–µ —Å–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏—Å—å –∑–∞–≥–æ–ª–æ–≤–∫–æ–º/–ø–æ–ª—è–º–∏.
    """
    try:
        from desc_parser import get_vacancy_description
    except Exception:
        get_vacancy_description = None

    text = ""
    if get_vacancy_description and url:
        try:
            text = get_vacancy_description(url) or ""
        except Exception:
            text = ""

    if text:
        try:
            summary = summarize_description(text)
        except Exception:
            summary = "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É —Å–µ—Ä–≤—ñ—Å—É."
    else:
        # fallback ‚Äî –º—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π –æ–ø–∏—Å –∑ –ø–æ–ª—ñ–≤
        parts = [title]
        if company:
            parts.append(f"–ö–æ–º–ø–∞–Ω—ñ—è: {company}")
        if salary:
            parts.append(f"–ó–∞—Ä–ø–ª–∞—Ç–∞: {salary}")
        summary = " ¬∑ ".join(parts)

    return format_for_telegram(title, company, salary, url, summary)
