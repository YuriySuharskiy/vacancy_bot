import os
import time
from openai import OpenAI
from desc_parser import get_vacancy_description

API_KEY = os.getenv("OPENAI_API_KEY")
if not API_KEY:
    raise SystemExit("OPENAI_API_KEY –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–π")

client = OpenAI(api_key=API_KEY)

MODEL = "gpt-5-mini"
MAX_RETRIES = 3
RETRY_BACKOFF = 1.5  # –º–Ω–æ–∂–Ω–∏–∫ –º—ñ–∂ —Å–ø—Ä–æ–±–∞–º–∏

# –õ—ñ–º—ñ—Ç–∏ (–Ω–∞–ª–∞—à—Ç—É–π—Ç–µ –ø—Ä–∏ –ø–æ—Ç—Ä–µ–±—ñ)
MAX_INPUT_CHARS = 2000         # —Å–∫–æ—Ä–æ—Ç–∏–ª–∏, —â–æ–± –∑–∞–ª–∏—à–∞–ª–æ—Å—å –º—ñ—Å—Ü—è –¥–ª—è –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
MAX_OUTPUT_TOKENS = 1000        # –±—ñ–ª—å—à–µ —Ç–æ–∫–µ–Ω—ñ–≤ –¥–ª—è –ø–æ–≤–Ω–æ—ó –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ


def _call_openai(prompt: str, timeout: int = 15, max_output_tokens: int = MAX_OUTPUT_TOKENS) -> str:
    """–í–∏–∫–ª–∏–∫ OpenAI –∑ —Ä–µ—Ç—Ä–∞—î–º —ñ –æ–±–º–µ–∂–µ–Ω–Ω—è–º –≤–∏—Ö—ñ–¥–Ω–∏—Ö —Ç–æ–∫–µ–Ω—ñ–≤."""
    delay = 1.0
    for attempt in range(1, MAX_RETRIES + 1):
        try:
            resp = client.responses.create(
                model=MODEL,
                input=prompt,
                max_output_tokens=max_output_tokens,
                timeout=timeout
            )
            # –°—É–º—ñ—Å–Ω–∞ –≤–∏—Ç—è–∂–∫–∞ —Ç–µ–∫—Å—Ç—É –∑ —Ä—ñ–∑–Ω–∏—Ö –≤–µ—Ä—Å—ñ–π –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            if hasattr(resp, "output_text") and resp.output_text:
                return resp.output_text.strip()
            # —ñ–Ω—à–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ
            out = ""
            for item in getattr(resp, "output", []) or []:
                for c in getattr(item, "content", []) or []:
                    if isinstance(c, dict) and c.get("type") == "output_text":
                        out += c.get("text", "")
                    elif isinstance(c, str):
                        out += c
            return out.strip()
        except Exception as exc:
            # –ª–æ–≤–∏–º–æ –±—É–¥—å-—è–∫—ñ –ø–æ–º–∏–ª–∫–∏ –∫–ª—ñ—î–Ω—Ç–∞/–º–µ—Ä–µ–∂—ñ; –≤–∏–∫–æ–Ω—É—î–º–æ —Ä–µ—Ç—Ä–∞–π
            if attempt == MAX_RETRIES:
                raise
            time.sleep(delay)
            delay *= RETRY_BACKOFF

def summarize_description(text: str) -> str:
    if not text:
        return ""
    prompt = f"""
–°—Ç–∏—Å–Ω–∏ –æ–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –¥–æ –∫–æ—Ä–æ—Ç–∫–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –¥–ª—è Telegram-–∫–∞–Ω–∞–ª—É.
–§–æ—Ä–º–∞—Ç:
‚Äî –∫–æ—Ä–æ—Ç–∫–∏–π –≤—Å—Ç—É–ø –∑ –Ω–∞–∑–≤–æ—é –ø–æ—Å–∞–¥–∏;
‚Äî –∫–ª—é—á–æ–≤—ñ –≤–∏–º–æ–≥–∏;
‚Äî —â–æ –ø—Ä–æ–ø–æ–Ω—É—é—Ç—å;
‚Äî –Ω–µ –±—ñ–ª—å—à–µ 700 —Å–∏–º–≤–æ–ª—ñ–≤ —Ç–∞ –Ω–µ –º–µ–Ω—à–µ 400 —Å–∏–º–≤–æ–ª—ñ–≤;
- –Ω–µ –ø—Ä–æ–ø–∏—Å—É–π –∑–∞—Ä–ø–ª–∞—Ç—É –≤ –æ–ø–∏—Å—ñ.

–í–ê–ñ–õ–ò–í–û: –∑–∞–≤–µ—Ä—à–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—å –ø–æ–≤–Ω–∏–º —Ä–µ—á–µ–Ω–Ω—è–º, –Ω–µ –æ–±—Ä–∏–≤–∞–π —Å–ª–æ–≤–æ –Ω–∞ —Å–µ—Ä–µ–¥–∏–Ω—ñ.

–¢–µ–∫—Å—Ç –æ–ø–∏—Å—É:
{text}
"""
    # —Ç—Ä–æ—Ö–∏ –±—ñ–ª—å—à–∏–π timeout –Ω–∞ –∑–∞–ø–∏—Ç
    return _call_openai(prompt, max_output_tokens=MAX_OUTPUT_TOKENS, timeout=30)

def format_for_telegram(title: str, company: str = "", salary: str = "", url: str = "", summary: str = "") -> str:
    """
    –í–µ—Ä—Å—ñ—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –∑ –ø—ñ–¥—Ç—Ä–∏–º–∫–æ—é –∫–æ–º–ø–∞–Ω—ñ—ó.
    company –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ, —â–æ–± –∑–±–µ—Ä–µ–≥—Ç–∏ —Å—É–º—ñ—Å–Ω—ñ—Å—Ç—å.
    """
    comp_line = f"üè¢ {company}\n" if company else ""
    message = (
        f"üßë‚Äçüíª <b>{title}</b>\n"
        f"{comp_line}"
        f"üí∞ {salary if salary else '–ó–∞—Ä–ø–ª–∞—Ç–∞ –Ω–µ –≤–∫–∞–∑–∞–Ω–∞'}\n\n"
        f"{summary}\n\n"
        f"üîó <a href='{url}'>–î–µ—Ç–∞–ª—å–Ω—ñ—à–µ</a>"
    )
    return message

def create_vacancy_summary(title: str, company: str = "", salary: str = "", url: str = "") -> str:
    """
    –ì–µ–Ω–µ—Ä—É—î summary —Ç–∞ –ø–æ–≤–µ—Ä—Ç–∞—î –æ—Ñ–æ—Ä–º–ª–µ–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. company –æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ.
    """
    text = get_vacancy_description(url)
    if not text:
        return format_for_telegram(title, company, salary, url, "–û–ø–∏—Å –≤–∞–∫–∞–Ω—Å—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π.")
    try:
        summary = summarize_description(text)
    except Exception:
        summary = "–ö–æ—Ä–æ—Ç–∫–∏–π –æ–ø–∏—Å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π —á–µ—Ä–µ–∑ –ø–æ–º–∏–ª–∫—É —Å–µ—Ä–≤—ñ—Å—É."
    return format_for_telegram(title, company, salary, url, summary)
